@using MatoProductivity.ViewModels
@inject IJSRuntime JSRuntime

<button class="button" @onclick=Refresh>刷新</button>


<div class="list-group" style="overflow:auto">
    @if (@StatisticPageViewModel.ViewState=="Charts")
    {
        <Virtualize Context="noteStatistic"
                    Items="@StatisticPageViewModel.NoteStatistices"
                    ItemSize="400">
            <div id=@noteStatistic.Title style="width:100%;height:400px;"></div>

        </Virtualize>
    }
    else if (@StatisticPageViewModel.ViewState=="Tables")
    {
        <Virtualize Context="noteStatistic"
                    Items="@StatisticPageViewModel.NoteStatistices"
                    ItemSize="400">
            <div style="width:100%;">
                <h3 style="color: rgba(70,70,70);font-size:16px;text-align:center">@noteStatistic.Title</h3>
                <Virtualize Context="keyValueStatisticGroup"
                            Items="@noteStatistic.KeyValueStatisticGroups"
                            ItemSize="400">

                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">日期</th>
                                <th scope="col">值</th>
                            </tr>
                        </thead>
                        <tbody>

                            @{
                                var data = GetTableDataValue(keyValueStatisticGroup);
                                for (int i = 0; i < data.Length; i++)
                                {
                                    <tr>
                                        <th scope="row">@i</th>
                                        <th>@data[i].Day</th>
                                        <th>@data[i].Value</th>
                                    </tr>
                                }
                            }

                        </tbody>
                    </table>
                </Virtualize>

            </div>

        </Virtualize>
    }
</div>
<script type="text/javascript">

    window.dataValueCharts = []

    window.dataValueChartsService = {
        //绘制天气温度图表
        DrawCharts: function (chartId, dailyDataValue) {

            this.InitCharts(chartId);

            this.FillCharts(dailyDataValue, chartId);

            window.dataValueCharts.push(this.dataValueChart);

        },

        //初始化图表
        InitCharts: function (chartId) {

            var dataValueChartElement = document.getElementById(chartId);
            if (dataValueChartElement == null)
                return;

            // 基于准备好的dom，初始化echarts实例
            var dataValueChart = echarts.init(dataValueChartElement);

            dataValueChart.showLoading();

            window.dataValueChartsService.dataValueChart = dataValueChart;
        },

        //填充图表的数据
        FillCharts: function (dailyDataValue, title) {

            if (this.dataValueChart == null)
                return;

            const days = dailyDataValue.days;
            const values = dailyDataValue.values;
            if (values.length == 0)
                return;
            var dataValueLineOption = {
                title: {
                    text: title,
                    left: 'center'
                },
                toolbox: {
                    show: true,
                    feature: {

                        magicType: { type: ['line', 'bar'] },

                    }
                },
                tooltip: {
                    trigger: 'axis'
                },
                xAxis: [],
                yAxis: [],
                grid: [],
                legend: {
                    left: 10
                },
                series: [

                ],
                dataZoom: [
                    {
                        show: true,
                        realtime: true,
                        start: 0,
                        end: 100,
                        handleIcon:
                            'path://M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
                        handleSize: '80%',
                        xAxisIndex: [0, 1]
                    },




                ],
            };
            var itemHeight = (100 - 10) / values.length;
            for (var i = 0; i < values.length; i++) {
                var itemTop = i * itemHeight;
                var value = values[i].value;
                var title = values[i].title;
                dataValueLineOption.grid.push({

                    left: 60,
                    right: 50,
                    top: (itemTop + 15) + '%',
                    height: itemHeight * 0.6 + '%'

                });

                dataValueLineOption.xAxis.push({
                    gridIndex: i,
                    type: 'category',
                    name: '日期',
                    data: days,
                });
                dataValueLineOption.yAxis.push({
                    gridIndex: i,
                    type: 'value',
                    name: title,
                });
                dataValueLineOption.series.push({
                    name:title,
                    type: 'line',
                    label: {
                        show: true,
                        position: 'bottom',
                    },
                    data: value,
                    xAxisIndex: i,
                    yAxisIndex: i,

                });
            }

            // 使用刚指定的配置项和数据显示图表。
            this.dataValueChart.setOption(dataValueLineOption);

            this.dataValueChart.hideLoading();
        },
        DisposeCharts: function () {
            if (window.dataValueCharts) {
                while (window.dataValueCharts.length > 0) {
                    var current = window.dataValueCharts.pop();
                    current.dispose();
                }
            }
        }

    };



</script>
<style>
    .button {
        background-color: black;
        border-width: 0;
        color: #fff;
        border-radius: 20px;
        font-size: 12px;
        letter-spacing: -.32px;
        line-height: 19px;
        padding: 5px 22px;
    }
</style>

@code {
    [Parameter]
    public StatisticPageViewModel StatisticPageViewModel { get; set; }

    public readonly string dataValueChartId = "";

    private async Task Refresh()
    {
        await StatisticPageViewModel.Init();

        try
        {
            foreach (var noteStatistic in StatisticPageViewModel.NoteStatistices)
            {

                var dailyDataValue = GetChartsDataValue(noteStatistic);
                var key = dataValueChartId + noteStatistic.Title;
                await JSRuntime.InvokeVoidAsync("dataValueChartsService.DrawCharts", key, dailyDataValue);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"天气温度绘图错误, {ex}");
        }
    }



    protected override async Task OnInitializedAsync()
    {
        StatisticPageViewModel.PropertyChanged +=  async (o, e) =>
        {

            await InvokeAsync(() => StateHasChanged());
            if (e.PropertyName==nameof(StatisticPageViewModel.ViewState))
            {
                if (StatisticPageViewModel.ViewState=="Charts")
                {
                    await Refresh();
                }
                else if (StatisticPageViewModel.ViewState=="Tables")
                {
                    await JSRuntime.InvokeVoidAsync("dataValueChartsService.DisposeCharts");

                }
            }

        };

    }




    private object GetChartsDataValue(NoteStatistic keyValueStatistic)
    {
        var days = keyValueStatistic.CreationTimes.Select(x => x.ToString("MM-dd HH:mm")).Distinct().ToArray();
        var value = keyValueStatistic.KeyValueStatisticGroups.Select(c => new
        {
            title = c.Title,
            value = c.Select(x => x.GetNoteSegmentPayload("Content")?.GetStringValue()).ToArray()
        });
        var dailyDataValue = new
        {
            Days = days,
            Values = value,
        };

        var jsonstr = Newtonsoft.Json.JsonConvert.SerializeObject(dailyDataValue);
        Console.WriteLine(jsonstr);
        return dailyDataValue;
    }

    private dynamic[] GetTableDataValue(KeyValueStatisticGroup keyValueStatistic)
    {
        var dailyDataValue = keyValueStatistic.Select(x => new
        {
            Day = x.CreationTime.ToString("MM-dd HH:mm"),
            Value = x.GetNoteSegmentPayload("Content")?.GetStringValue()
        }).ToArray();

        return dailyDataValue;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await Refresh();
    }
}